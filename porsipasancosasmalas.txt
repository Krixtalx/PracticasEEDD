
/*
*@Brief Metodo encargado de leer clientes de un CSV
*/
void leeClientes(string fileNameClientes, EcoCityMoto& ecocity) {
	ifstream fe; //Flujo de entrada
	string linea; //Cada línea tiene un clienete
	int total = 0; //Contador de líneas o clientes

	//Variables auxiliares para almacenar los valores leídos
	string dni, nombre, apellido, pass, direccion, latitud, longitud;
	double dlat, dlon;

	//Asociamos el flujo al fichero
	fe.open(fileNameClientes);

	if (fe.good()) {
		//Mientras no se haya llegado al final del fichero
		while (!fe.eof()) {
			getline(fe, linea); //Toma una línea del fichero
			stringstream ss; //Stream que trabaja sobre buffer interno

			if (linea != "") {
				++total;
			}

			if (total > 1) {
				//Inicializamos el contenido de ss
				ss << linea;

				//Leemos el NIF
				getline(ss, dni, ';'); //El carácter ; se lee y se elimina de ss

				//Leemos el pass
				getline(ss, pass, ';'); //El caráter ; se lee y se elimina de ss

				//Leemos el nombre
				getline(ss, nombre, ' '); //El caráter ' ' se lee y se elimina de ss

				//Leemos el apellido
				getline(ss, apellido, ';'); //El carácter ; se lee y se elimina de ss

				//Leemos la dirección
				getline(ss, direccion, ';'); //El caráter ; se lee y se elimina de ss

				//Leemos la latitud y longitud
				getline(ss, latitud, ';'); //El caráter ; se lee y se elimina de ss
				getline(ss, longitud, ';'); //El caráter ; se lee y se elimina de ss
				
				setlocale(LC_ALL, "english");
				dlat = std::stod(latitud);
				dlon = std::stod(longitud);
				setlocale(LC_ALL, "spanish");
				//con todos los atributos leídos, se crea el cliente
				Cliente client(dni, pass, nombre, apellido, direccion, dlat, dlon);
				client.setAplicacion(&ecocity);
				try {
					ecocity.insertaCliente(client);
				}
				catch (const std::runtime_error & e) {
					std::cout << e.what() << '\n';
				}
			}
		}

		cout << "Total de clientes en el fichero: " << total << endl;
		fe.close(); //Cerramos el flujo de entrada
	}
	else {
		cerr << "No se puede abrir el fichero" << endl;
	}
}

/*
*@Brief Metodo encargado de leer el CSV de motos
*/
void leeMotos(string fileNameMotos, EcoCityMoto& ecocity) {
	ifstream fe; //Flujo de entrada
	string linea; //Cada línea tiene un clienete
	int total = 0; //Contador de líneas o clientes

	//Variables auxiliares para almacenar los valores leídos
	string matricula, estado, latitud, longitud;
	int iestado;
	double dlat, dlon;

	//Asociamos el flujo al fichero
	fe.open(fileNameMotos);

	if (fe.good()) {
		//Mientras no se haya llegado al final del fichero
		while (!fe.eof()) {
			getline(fe, linea); //Toma una línea del fichero
			stringstream ss; //Stream que trabaja sobre buffer interno

			if (linea != "") {
				++total;
			}

			if (total > 1) {
				//Inicializamos el contenido de ss
				ss << linea;

				//Leemos la matricula
				getline(ss, matricula, ';'); //El carácter ; se lee y se elimina de ss

				//Leemos el estado
				getline(ss, estado, ';'); //El caráter ; se lee y se elimina de ss
				iestado = stoi(estado);

				//Leemos la latitud y longitud
				getline(ss, latitud, ';'); //El caráter ; se lee y se elimina de ss
				getline(ss, longitud, ';'); //El caráter ; se lee y se elimina de ss
				
				setlocale(LC_ALL, "english");
				dlat = stod(latitud);
				dlon = stod(longitud);
				setlocale(LC_ALL, "spanish");
				//con todos los atributos leídos, se crea el cliente
				estatus estadoMoto;
				switch (iestado) {
				case 0:
					estadoMoto = estatus::bloqueada;
					break;
				case 1:
					estadoMoto = estatus::activa;
					break;
				case 2:
					estadoMoto = estatus::sinbateria;
					break;
				case 3:
					estadoMoto = estatus::rota;
				}

				UTM utm(dlat, dlon);

				Moto* moto = new Moto(matricula, utm, estadoMoto, 1 + (rand() % 100));
				ecocity.insertaMoto(moto);
			}
		}

		cout << "Total de Motos en el fichero: " << total << endl;
		fe.close(); //Cerramos el flujo de entrada
	}
	else {
		cerr << "No se puede abrir el fichero" << endl;
	}
}

void leeLineaCliente(string& csv, EcoCityMoto& ecocity, Cliente* &cliActivo) {
	stringstream ss;
	string dni, pass, nombre, apellido, direccion, latitud, longitud;
	float dlat, dlon;
	//Inicializamos el contenido de ss
	ss << csv;

	//Leemos el NIF
	getline(ss, dni, ';'); //El carácter ; se lee y se elimina de ss

	//Leemos el pass
	getline(ss, pass, ';'); //El caráter ; se lee y se elimina de ss

	//Leemos el nombre
	getline(ss, nombre, ' '); //El caráter ' ' se lee y se elimina de ss

	//Leemos el apellido
	getline(ss, apellido, ';'); //El carácter ; se lee y se elimina de ss

	//Leemos la dirección
	getline(ss, direccion, ';'); //El caráter ; se lee y se elimina de ss

	//Leemos la latitud y longitud
	getline(ss, latitud, ';'); //El caráter ; se lee y se elimina de ss
	getline(ss, longitud, ';'); //El caráter ; se lee y se elimina de ss

	setlocale(LC_ALL, "english");
	dlat = std::stod(latitud);
	dlon = std::stod(longitud);
	setlocale(LC_ALL, "spanish");
	//con todos los atributos leídos, se crea el cliente
	Cliente client(dni, pass, nombre, apellido, direccion, dlat, dlon);
	client.setAplicacion(&ecocity);
	try {
		cliActivo = ecocity.insertaCliente(client);
	}
	catch (const std::runtime_error & e) {
		std::cout << e.what() << '\n';
	}
}

void leeItinerariosYClientes(string archivo, EcoCityMoto& ecocity) {
	ifstream fichero;
	fichero.open(archivo);
	if (fichero.good()) {
		string linea;
		Cliente* clienteActivo = 0;
		while (!fichero.eof()) {
			stringstream ss;
			getline(fichero, linea);
			if (linea == "")
				continue;
			if (linea[0] == '-') {
				string temp = linea.substr(1);
				try {
					leeLineaCliente(temp, ecocity, clienteActivo);
				}
				catch (std::runtime_error & e) {
					cout << e.what() << endl;
				}/*
				if (!ecocity.buscaCliente(temp, clienteActivo)){
					cerr << "Erorr al cargar datos del cliente " << temp << endl;
					break;
				}*/
			}
			else {
				if (!clienteActivo)
					throw std::runtime_error("[leeItinerariosYClientes] Error al buscar cliente");
				ss << linea;
				string id, minutos;
				string latInicio, lonInicio, latFinal, lonFinal;
				string dia, mes, anio, hora, minuto;
				getline(ss, id, ';');
				getline(ss, minutos, ';');
				getline(ss, latInicio, ':');
				getline(ss, lonInicio, ';');
				getline(ss, latFinal, ':');
				getline(ss, lonFinal, ';');
				getline(ss, dia, '/');
				getline(ss, mes, '/');
				getline(ss, anio, ' ');
				getline(ss, hora, ':');
				getline(ss, minuto);
				UTM inicio(stod(latInicio), stod(lonInicio)), fin(stod(latFinal), stod(lonFinal));
				Fecha fecha(stoi(dia), stoi(mes), stoi(anio), stoi(hora), stoi(minuto));
				Itinerario* iti = new Itinerario(stoi(id), stoi(minutos), inicio, fin, fecha);
				clienteActivo->addItinerario(iti);
				ecocity.setIdUltimo(stoi(id));
			}
		}
	}
	else {
		cerr << "No se pudo cargar los itinerarios" << endl;
	}

}

//TODO: borrar esto tambien :(
/*
*@Brief Genera el arbol AVL formado por clientes en la consola. No sirve para un arbol AVL muy grande
*/
void visualizaArbol(EcoCityMoto& ecocity) {
	char yon;
	cout << "Esta función no funcionará correctamente con un gran número de Clientes" << endl << "¿Está seguro de que quiere hacerlo?   S/n" << endl;
	cin >> yon;
	if (yon == 'S') {
		clearScreen();
		//ecocity.verArbolCliente();
	}
	else {
		clearScreen();
	}
}

//TODO: borrar esto :(
/*
*@Brief Devuelve la altura del árbol AVL en el que están los clientes
*/
void alturaArbol(EcoCityMoto& ecocity) {
	//cout << "La altura del árbol es " << ecocity.getAlturaAVL();
}